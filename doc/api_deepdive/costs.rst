skwdro.base.costs_torch module
-------------------------------

Here you can fin the API for all available cost functionals in the library.
They are used to define the **ground cost** for transporting probability mass from sample :math:`\xi` in the dataset to :math:`\zeta` an *"adversarial"* sample generated by ``SkWDRO``.

They all subclass the :py:class:`BaseCost` class, and so should your custom implementations if you wish to build one from scratch.

Most users will want by default to turn to norm-powers if their problem lies in a Hilbert space.
They may then wish to turn to the helper functions :py:func:`~skwdro.base.cost_decoder.cost_from_str`.

.. automodule:: skwdro.base.costs_torch
   :members:
   :show-inheritance:
   :undoc-members:
   :no-index:
